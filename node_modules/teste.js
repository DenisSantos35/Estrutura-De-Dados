// TELA DE APRESENTAÇÃO DO PROGRAMA:
// Entre com uma das opções abaixo:
// 1. Cadastrar Alunos.
// 2. Relatório de Alunos em ordem crescente por Nome. (utilizar ordenação selection-sort e busca sequencial)
// 3. Relatório de Alunos em ordem decrescente por RA. (utilizar ordenação bubble-sort e busca binária)
// 4. Relatório de Alunos em ordem crescente por Nome, apenas dos Aprovados. (utilizar ordenação quick-sort e busca sequencial, considerar aprovado média igual ou maior que 6)
// 5. Encerre a execução do programa. 
// Digite a opção desejada:

// Para os relatórios, todos os campos de cada aluno deverão ser apresentados na tela.
// Programa em JavaScript
// Considerar o array com o nome de alunos


//Array para armazenar os alunos cadastrados
let alunos = [];

//Importando o readline-sync para fazer a leitura do input
// import readline from 'readline';
// const rl = readline.createInterface({
//   input: process.stdin,
//   output: process.stdout
// });

const prompt = require('prompt-sync')();



// Solicita informações do aluno, adiciona ao array, função para cadastrar um novo aluno
function cadastrarAluno() {
  let novoAluno = {};
  novoAluno.nome = prompt('Digite o nome do aluno:');
  novoAluno.ra = prompt('Digite o RA do aluno:');
  novoAluno.idade = parseInt(prompt('Digite a idade do aluno:'));
  novoAluno.sexo = prompt('Digite o sexo do aluno:');
  novoAluno.media = parseFloat(prompt('Digite a média do aluno:'));
  novoAluno.resultado = novoAluno.media >= 6 ? 'Aprovado' : 'Reprovado';
  alunos.push(novoAluno);
  console.log("Aluno cadastrado com sucesso!");
}


function relatorioNomeCrescente() {
  // Ordena os alunos por nome usando selection-sort
  for (let i = 0; i < alunos.length - 1; i++) {
    let menor = i;
    for (let j = i + 1; j < alunos.length; j++) {
      if (alunos[j].nome < alunos[menor].nome) {
        menor = j;
      }
    }
    let aux = alunos[i];
    alunos[i] = alunos[menor];
    alunos[menor] = aux;
  }

  // Exibe relatório na tela
  let relatorio = "Relatório de Alunos em ordem crescente por Nome:\n\n";
  for (let aluno of alunos) {
    relatorio += `Nome: ${aluno.nome} | RA: ${aluno.ra} | Idade: ${aluno.idade} | Sexo: ${aluno.sexo} | Média: ${aluno.media} | Resultado: ${aluno.resultado}\n`;
  }
  console.log(relatorio);
}

function relatorioRaDecrescente() {
  // Ordena os alunos por RA usando bubble-sort
  for (let i = alunos.length - 1; i >= 0; i--) {
    for (let j = 0; j < i; j++) {
      if (alunos[j].ra < alunos[j + 1].ra) {
        let aux = alunos[j];
        alunos[j] = alunos[j + 1];
        alunos[j + 1] = aux;
      }
    }
  }

  // Exibe relatório na tela
  let relatorio = "Relatório de Alunos em ordem decrescente por RA:\n\n";
  for (let aluno of alunos) {
    relatorio += `Nome: ${aluno.nome} | RA: ${aluno.ra} | Idade: ${aluno.idade} | Sexo: ${aluno.sexo} | Média: ${aluno.media} | Resultado: ${aluno.resultado}\n`;
  }
  console.log(relatorio);
}

// Função para filtrar apenas os alunos aprovados
function filtrarAprovados(alunos) {
  return alunos.filter(aluno => aluno.media >= 6);
}

// Função para ordenar os alunos por nome utilizando o algoritmo quicksort
function quicksort(alunos, inicio, fim) {
  if (inicio < fim) {
    let pivo = particao(alunos, inicio, fim);
    quicksort(alunos, inicio, pivo - 1);
    quicksort(alunos, pivo + 1, fim);
  }
}

function particao(alunos, inicio, fim) {
  let pivo = alunos[fim].nome;
  let i = inicio - 1;

  for (let j = inicio; j <= fim - 1; j++) {
    if (alunos[j].nome < pivo) {
      i++;
      [alunos[i], alunos[j]] = [alunos[j], alunos[i]];
    }
  }

  [alunos[i + 1], alunos[fim]] = [alunos[fim], alunos[i + 1]];
  return i + 1;
}

// Função para exibir o relatório de alunos aprovados em ordem crescente por nome
function relatorioAprovados() {
  let alunosAprovados = filtrarAprovados(alunos);
  quicksort(alunosAprovados, 0, alunosAprovados.length - 1);

  let relatorio = "Relatório de Alunos Aprovados\n\n";

  if (alunosAprovados.length === 0) {
    relatorio += "Não há alunos aprovados para serem exibidos.";
  } else {
    alunosAprovados.forEach(aluno => {
      relatorio += `Nome: ${aluno.nome} | RA: ${aluno.ra} | Idade: ${aluno.idade} | Sexo: ${aluno.sexo} | Média: ${aluno.media} | Resultado: ${aluno.resultado}\n`;
    });
  }

  console.log(relatorio);
}

// função para exibir os alunos na tela
function exibirAlunos(listaAlunos) {
    let lista = listaAlunos || alunos; // se não foi passada uma lista de alunos, usa a lista completa
    let texto = "Nome\tRA\tIdade\tSexo\tMédia\tResultado\n";
    lista.forEach((aluno) => {
      texto += `${aluno.nome}\t${aluno.ra}\t${aluno.idade}\t${aluno.sexo}\t${aluno.media}\t${aluno.resultado}\n`;
    });
    console.log(texto);
}

let opcao = '';

while (opcao !== '5') {
  console.log('Entre com uma das opções abaixo:');
  console.log('1. Cadastrar Alunos.');
  console.log('2. Relatório de Alunos em ordem crescente por nome.');
  console.log('3. Relatório de Alunos em ordem decrescente por RA.');
  console.log('4. Relatório de Alunos em ordem crescente por nome, apenas dos aprovados');
  console.log('5. Encerre a execução do programa.');
  console.log('Digite a opção desejada:');
  
  // opcao = await new Promise(resolve => {
  //   rl.question('Opção:', (resposta) => {
  //     resolve(resposta);
  //   });
  // });
  opcao = prompt('escolha uma opcao')

  switch (opcao) {
    case '1':
      cadastrarAluno();
      break;
    case '2':
      relatorioNomeCrescente();
      break;
    case '3':
      relatorioRaDecrescente();
      break;
    case '4':
      relatorioAprovados();
      break;
    case '5':
      console.log('Encerrando o programa...');
      //rl.close();
      break;
    default:
      console.log('Opção inválida! Tente novamente.');
      break;
  }
}